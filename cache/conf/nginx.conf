worker_processes  1;
error_log logs/error.log;
events {
    worker_connections 1024;
}
http {

	server {
	  listen 8080;
	  server_name _;
	  server_name_in_redirect off;
	  port_in_redirect off;

	  location / {
	    set $upstream "";
	    rewrite_by_lua '
	      -- load global route cache into current request scope
	      -- by default vars are not shared between requests
	      local routes = _G.routes

	      -- setup routes cache if empty
	      if routes == nil then
		routes = {}
                routes["localhost:8080"] = "192.168.2.1:3000"
		ngx.log(ngx.ALERT, "Route cache is ready.")
	      end

              ngx.log(ngx.ALERT, ngx.var.http_host)

              -- try cached route first
              local route = routes[ngx.var.http_host]

	      -- fallback to redis for lookups
	      if route ~= nil then
		ngx.var.upstream = route
		routes[ngx.var.http_host] = route
		_G.routes = routes
	      else
		ngx.exit(ngx.HTTP_NOT_FOUND)
	      end
	    ';

	    proxy_buffering             off;
	    proxy_set_header            Host $host;
	    proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
	    proxy_redirect              off;
	    proxy_connect_timeout       10;
	    proxy_send_timeout          30;
	    proxy_read_timeout          30;
	    proxy_pass                  http://$upstream;
	  }
	}

}
