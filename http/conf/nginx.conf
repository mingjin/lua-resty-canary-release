worker_processes  1;
error_log logs/error.log;
events {
    worker_connections 1024;
}
http {
    lua_package_path "/home/vagrant/lua-resty-http/lib/?.lua;;";
    lua_code_cache on;

    init_by_lua '
      -- setup routes cache if empty
      if routes == nil then
        routes = {}
      end
    ';

    server {
        listen 8080;
        set $app_service_server "192.168.80.164:3000";
        set $app_id 2;

        location /index.html {
            set $upstream "";
	    resolver 8.8.8.8;  # use Google's open DNS server for an example

	    rewrite_by_lua '

              local routes = _G.routes

              local query_string = ngx.var.query_string;
              local query_param = "ip="..ngx.var.remote_addr.."&"..query_string

              -- try cached route first
              local route = routes[query_param]

              if route == nil then
                local app_service = "http://"..ngx.var.app_service_server.."/api/greyrelease/applications/"..ngx.var.app_id.."/endpoint.json"
	        -- For simple singleshot requests, use the URI interface.
	        local http = require "resty.http"
	        local httpc = http.new()
                local authorization = "Basic "..ngx.encode_base64("admin:12345678")
	        local res, err = httpc:request_uri(app_service, {
		  method = "POST",
                  body = "ip="..ngx.var.remote_addr.."&"..query_string,
		  headers = {
		    ["User-Agent"] = "ScaleWorks-CLI",
                    ["Authorization"] = authorization,
		  }
	        })

	        if not res then
		  ngx.log(ngx.ALERT, "failed to request: ", err)
		  return
	        end

	        -- In this simple form, there is no manual connection step, so the body is read
	        -- all in one go, including any trailers, and the connection closed or keptalive
	        -- for you.

	        -- ngx.status = res.status

	        -- for k,v in pairs(res.headers) do
		  --  ngx.say("headers: ", k, " : ", v) 
	        -- end

	        -- ngx.say(res.body)

                local cjson = require "cjson"
                route = cjson.decode(res.body).endpoint
              end

              -- fallback to http for lookups
              if route ~= nil then
                ngx.var.upstream = route
                if routes[query_param] ~= route then
                  routes[query_param] = route
                  _G.routes = routes
                  ngx.log(ngx.ALERT, "===2== IP: ", ngx.var.remote_addr, ", Upstream: ", route, " ====")
                end
              else
                ngx.exit(ngx.HTTP_NOT_FOUND)
              end
	    ';

            proxy_buffering             off;
            proxy_set_header            Host $host;
            proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_redirect              off;
            proxy_connect_timeout       10;
            proxy_send_timeout          30;
            proxy_read_timeout          30;
            proxy_pass                  http://$upstream;
        }
    }

}
